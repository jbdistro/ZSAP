REPORT z_fues_role_user_tran.

TABLES: agr_define, agr_users, usr02.

* Textos en castellano
CONSTANTS c_no_datos TYPE char25 VALUE 'No se encontraron datos.'.

TYPES: BEGIN OF ty_result,
         rol     TYPE agr_define-agr_name,
         usuario TYPE usr02-bname,
       END OF ty_result.

DATA gt_result TYPE STANDARD TABLE OF ty_result.

SELECT-OPTIONS: s_role FOR agr_define-agr_name,
                s_user FOR usr02-bname.

PARAMETERS: p_ruser  AS CHECKBOX USER-COMMAND rusr MODIF ID rusr,
            p_rnousr AS CHECKBOX USER-COMMAND rusr MODIF ID rusr,
            p_urole  AS CHECKBOX USER-COMMAND urol MODIF ID urol,
            p_unorol AS CHECKBOX USER-COMMAND urol MODIF ID urol.

AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    CASE screen-name.
      WHEN 'P_RUSER'.
        IF p_rnousr = 'X'.
          screen-input = 0.
          p_ruser = space.
        ELSE.
          screen-input = 1.
        ENDIF.
      WHEN 'P_RNOUSR'.
        IF p_ruser = 'X'.
          screen-input = 0.
          p_rnousr = space.
        ELSE.
          screen-input = 1.
        ENDIF.
      WHEN 'P_UROLE'.
        IF p_unorol = 'X'.
          screen-input = 0.
          p_urole = space.
        ELSE.
          screen-input = 1.
        ENDIF.
      WHEN 'P_UNOROL'.
        IF p_urole = 'X'.
          screen-input = 0.
          p_unorol = space.
        ELSE.
          screen-input = 1.
        ENDIF.
    ENDCASE.
    MODIFY SCREEN.
  ENDLOOP.

START-OF-SELECTION.
  PERFORM obtener_datos.
  IF gt_result IS INITIAL.
    MESSAGE c_no_datos TYPE 'I'.
  ELSE.
    PERFORM mostrar_alv.
  ENDIF.

FORM obtener_datos.
  CLEAR gt_result.
  IF p_ruser = 'X'.
    SELECT a~agr_name AS rol
           u~bname    AS usuario
      FROM agr_define AS a
      INNER JOIN agr_users AS u ON a~agr_name = u~agr_name
      WHERE a~agr_name IN @s_role
        AND u~bname    IN @s_user
      INTO TABLE @gt_result
      UP TO 1000 ROWS.
  ELSEIF p_rnousr = 'X'.
    SELECT agr_name
      FROM agr_define
      WHERE agr_name IN @s_role
        AND NOT EXISTS ( SELECT 1 FROM agr_users WHERE agr_name = agr_define~agr_name )
      INTO TABLE @DATA(lt_roles)
      UP TO 1000 ROWS.
    LOOP AT lt_roles INTO DATA(ls_role).
      APPEND VALUE ty_result( rol = ls_role-agr_name usuario = space ) TO gt_result.
    ENDLOOP.
  ENDIF.

  IF p_unorol = 'X'.
    SELECT bname
      FROM usr02
      WHERE bname IN @s_user
        AND NOT EXISTS ( SELECT 1 FROM agr_users WHERE uname = usr02~bname )
      INTO TABLE @DATA(lt_users)
      UP TO 1000 ROWS.
    LOOP AT lt_users INTO DATA(ls_user).
      APPEND VALUE ty_result( rol = space usuario = ls_user-bname ) TO gt_result.
    ENDLOOP.
  ENDIF.
ENDFORM.

FORM mostrar_alv.
  DATA lo_alv TYPE REF TO cl_salv_table.

  cl_salv_table=>factory( IMPORTING r_salv_table = lo_alv
                          CHANGING  t_table      = gt_result ).

  DATA lo_cols TYPE REF TO cl_salv_columns_table.
  lo_cols = lo_alv->get_columns( ).
  TRY.
      lo_cols->get_column( 'ROL' )->set_medium_text( 'Rol' ).
      lo_cols->get_column( 'USUARIO' )->set_medium_text( 'Usuario' ).
    CATCH cx_salv_not_found.
  ENDTRY.
  lo_alv->display( ).
ENDFORM.

